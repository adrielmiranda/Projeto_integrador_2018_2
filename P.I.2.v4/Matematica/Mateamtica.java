package Matematica;

import java.util.Arrays;

public class Mateamtica {
    public static void main(String[] args) {
      double valoresVenda[] = {1, 46, 49, 51, 54, 54, 59, 59, 60, 60, 61, 61, 62, 65, 66, 66, 67, 67, 69, 70, 70, 71,
        72, 74, 74, 76, 79, 80, 82, 87, 88};

        System.out.print("\nQuantidades de vendas: " + "\n");
        Arrays.sort(valoresVenda);
        for (int i = 0; i < valoresVenda.length; i++) {

            System.out.printf("%.0f%n", valoresVenda[i], "\n");
        }

        System.out.print("\nNúmeros Xi: " + "\n");

        // compiar o array e remover os números repetidos
        double[] unicos = new double[valoresVenda.length];
        int qtde = 0;
        for (int i = 0; i < valoresVenda.length; i++) {
            boolean existe = false;
            for (int j = 0; j < qtde; j++) {

                if (unicos[j] == valoresVenda[i]) {
                    existe = true;
                    break;
                }
            }
            if (!existe) {
                unicos[qtde++] = valoresVenda[i];
            }
        }
        // retirar as posições do array que não foram usadas
        unicos = Arrays.copyOf(unicos, qtde);

        // imprime o resultado
        for (int i = 0; i < unicos.length; i++) {
            System.out.printf("%.0f%n", unicos[i]);

        }
        // Codigo para os calculos de quantas vezes o numero de vendas se repetiu
        System.out.println("\nQuantidades Ni:");
        int cont = 1;
        int soma = 0;
        int soma1 = 0;
        double numeros = 0;
        double vetCONTADOR[] = new double[valoresVenda.length]; // criando vetor CONTADOR com o
        // //tamanho de 31 que é a quantidade
        // //de valores

        for (int i = 0; i < unicos.length; i++) {
            cont = 0;

            for (int j = 0; j < valoresVenda.length; j++) {
                if (unicos[i] == valoresVenda[j]) {
                    cont++;

                }
            }
            System.out.println(cont); // imprime a qtde de vezes que o número de vendas se repetiu

            vetCONTADOR[i] = cont; // vetor CONTADOR recebendo cada posição do cont

            soma += cont;
        }
        System.out.println("Total: " + soma);// imprime o soma da qtdede vezes que o numero se repetiu

        // Codigo para os calculos de Xi vezes Ni
        System.out.println("\nXi x Ni:");
        for (int i = 0; i < unicos.length; i++) {
            cont = 0;

            for (int j = 0; j < valoresVenda.length; j++) {
                if (unicos[i] == valoresVenda[j]) {
                    cont++;
                    numeros = unicos[i] * cont;
                }
            }
            System.out.println(numeros);// imprime a multiplicaçao de Xi vezes Ni
            soma1 += numeros;
        }
        System.out.println("Total: " + soma1);// imprime a soma de Xi vezes Ni

        // Calculos para achar as porcentagens de Ni dividido pelo o total vezes 100
        System.out.println("\nPorcentagens de valores:");
        double somaPercent = 0;
        int vetcontador = vetCONTADOR.length; // jogando o tamanho do vetor na variável
        double vetPorcentagem[] = new double[unicos.length];

        for (int i = 0; i < unicos.length; i++) {

            vetPorcentagem[i] = (vetCONTADOR[i] / soma) * 100; // fazendo a conta do 100*fi

            System.out.printf("%.2f %%\n", vetPorcentagem[i]);// imprimindo as porcentagens

            somaPercent += vetPorcentagem[i];

        }
        System.out.printf("Total: %.2f %%", somaPercent);// imprimindo o total das porcentagens
        System.out.println("\n");
        
        // calculo para média
        double media = 0;
        for (int i = 0; i < valoresVenda.length; i++) {
            media += valoresVenda[i] / soma;

        }

        // Calculos finais: pegar a media menos o Xi elevado a 2 vezes Ni
        System.out.println("Valores Finais:");
        double somaFinal = 0;
        double[] vetFinal = new double[unicos.length];
        for (int i = 0; i < unicos.length; i++) {
            vetFinal[i] = ((media - unicos[i]) * (media - unicos[i]) * vetCONTADOR[i]);

            System.out.printf("%.0f\n", vetFinal[i]);// imprimindo o resultado
            somaFinal += vetFinal[i];
        }

        System.out.printf("Total: %.0f", somaFinal);// imprimindo o total
        System.out.println("\n");
        
        // imprime a média 
        System.out.printf("Média: %.2f\n", media);
        
        System.out.println("Moda: ");

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//         int i = 0 ;
//           int j = 0;
//           double moda = valoresVenda[0];
// 
//  String modaInterface[] = new String [valoresVenda.length];
//  
//  String modaInterface2 = "";
//
//
//        for(int i = 0 ; i < valoresVenda.length -1 ; i++){
//      
//                   
//            if (valoresVenda[i] == valoresVenda[i+1]){
//
//                moda = valoresVenda[i];
//                modaInterface[i] = String.valueOf(moda);
//                
//                 System.out.println(moda);   
//                    
//                 modaInterface2 = modaInterface[i];
//            }
//        
//  
//        }
        
//        moda2 = moda;
//------------------------------------------------------------------------------
   // calculo para achar a moda
  // nessa parte imprime os numeros com duas ou mais repetições 
    double [] vet = new double [valoresVenda.length];
    int cont2 = 0;       
            
            
    double moda = valoresVenda[0];
        for (int i = 0; i < valoresVenda.length - 1; i++) {
            if (valoresVenda[i] == valoresVenda[i + 1]) {
                if(moda != valoresVenda[i]){
                    moda = valoresVenda[i]; 
                    vet[i] = moda; //posição i do vetor recebe moda corrente
                    cont2 = cont2 + 1; //achando a quantidade de números q se repetem e jogando essa quantidade na variável cont
                   System.out.println(vet[i]); //mostrando todas as modas de cada posição do vetor
               
                   
                }
                    
           }   
       } 
        
        System.out.printf("\n\n");
        System.out.printf("O contador é: %d", cont2); //imprimindo na tela o valor do contador
        System.out.printf("\n");
        
        
        
        
         String modaCompleta = " "; //criando variável modaCompleta para pegar todas as modas
                                    // para ficar na mesma linha e jogar na INTERFACE
         
        for (int i = 0; i < valoresVenda.length - 1; i++) {//mesmo código da parte de cima
            if (valoresVenda[i] == valoresVenda[i + 1]) { //mesmo código da parte de cima
                if(moda != valoresVenda[i]){ //mesmo código da parte de cima
                    moda = valoresVenda[i]; //mesmo código da parte de cima
                    vet[i] = moda; //mesmo código da parte de cima
        
    
                   for( int i3 = 0 ; i3 < 1; i3++ ){ // 
                    modaCompleta = modaCompleta + vet[i] + " || "; // jogando todas as modas dentro de uma String só
                       System.out.printf("\n%s",modaCompleta);
                     }
                   
                }
                    
            }
        }  
        
             

//       moda2 = moda;
//     ===============================================================================

     
        System.out.printf("\n");       
//        System.out.println(modaCompleta);
//        moda2 = (modaCompleta);
        System.out.printf("\n");       
       
       

//         0   1  2   3   4
//        {1, 46, 49, 51, 54, 54, 59, 59, 
//        60, 60, 61, 61, 62, 65, 66, 66, 67, 67, 69, 
//        70, 70, 71, 72, 74, 74, 76, 79,
//        80, 82, 87, 88};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
        // calculos para achar a mediana
        int valoresNumeros = valoresVenda.length % 2;
        double mediana = 0;
        double mediana1 = 0;

        if (valoresNumeros == 1) {
            mediana = valoresVenda[((valoresVenda.length + 1) / 2) - 1];
            System.out.println("Mediana: " + mediana);
        } else {
            int num = valoresVenda.length / 2;
            mediana1 = (valoresVenda[num - 1] + valoresVenda[num]) / 2;
            System.out.println("Mediana: " + mediana1);
        }
        double variancia = 0;
        double desvioPadrao = 0;
        variancia = somaFinal / soma;
        System.out.printf("Variância: %.2f ", variancia);
        
        // calculo para o desvio padrão
        desvioPadrao  = Math.sqrt(variancia);
        System.out.printf("\nDesvio Padrão: %.2f ", desvioPadrao);
          
//==========================================================================================================        
//==========================================================================================================    
 //==========================================================================================================     
      System.out.println("\n\n\nVALORES DA SEGUNDA ABA COM CLASSES:\n");
        
        
        int QTDclasse1 = 0;
        int QTDclasse2 = 0;
        int QTDclasse3 = 0;
        int QTDclasse4 = 0;
        int QTDclasse5 = 0;
        int QTDclasse6 = 0;
        int QTDclasse7 = 0;
        int QTDclasse8 = 0;
        int QTDclasse9 = 0;
        int QTDclasse10 = 0;
        int QTDclasse11 = 0;
        int QTDclasse12 = 0;
        int QTDclasse13 = 0;
        int QTDclasse14 = 0;
        int QTDclasse15 = 0;

        double classe1 = 0;
        double classe2 = 0;
        double classe3 = 0;
        double classe4 = 0;
        double classe5 = 0;
        double classe6 = 0;
        double classe7 = 0;
        double classe8 = 0;
        double classe9 = 0;
        double classe10 = 0;
        double classe11 = 0;
        double classe12 = 0;
        double classe13 = 0;
        double classe14 = 0;
        double classe15 = 0;

        double somavetor = 0;

        double menorVALOR = 0;
        double maiorVALOR = 0;

        //double entradados[] = {1,46,49,51,54,54,59,59,60,60,61,61,62,65,66,66,67,67,69,70,70,71,72,74,74,76,79,80,82,87,88};

        /*
		double entradados[] = {3,5,7,9,
							  10,11,12,15,15,17,18,19,19,
							  20,21,23,23,23,25,25,26,27,28,29,
							  30,31,31,31,32,33,34,34,34,34,35,36,37,38,39,
							  40,40,40,41,42,43,44,44,45,46,47,48,49,
							  50,51,52,53,54,55,56,56,56,56,56,57,57,57,58,
							  60,61,62,63,64,65,66,67,68,69,
							  70,71,72,72,72,72,72,75,75,75,75,75,75,75,78,79,
							  80,81,82,83,84,85,86};
							  
         */
        double entraDados[] = {
            57.52, 57.66, 59.20, 59.35, 60.71, 60.92, 62.76, 64.47, 64.53, 64.55, 67.45, 68.20, 68.82, 70.91, 73.59, 78.16, 78.58, 79.16, 81.83, 82.00, 83.17, 85.04, 85.54, 86.79, 90.10, 91.48, 92.57, 92.93, 94.03, 95.61, 96.07, 98.90, 99.03, 100.30, 101.15, 102.61, 104.15, 105.34, 108.09, 108.66, 110.30, 112.50, 113.88, 114.01, 115.14, 116.83, 121.79, 122.40, 122.74, 123.48, 123.99, 125.65, 126.51, 130.61, 130.94, 131.13, 131.63, 136.27, 136.79, 139.53, 144.06, 144.17, 144.80, 146.23, 146.30, 148.12, 150.36, 151.52, 152.75, 152.85, 153.69, 154.85, 155.08, 155.49, 156.14, 156.76, 156.96, 157.14, 160.36, 160.53, 162.65, 162.94, 163.53, 165.09, 165.78, 166.81, 167.02, 169.58, 170.93, 171.89, 176.14, 179.33, 179.44, 180.48, 190.04, 190.71, 191.03, 191.84, 193.34, 194.60, 195.30, 195.94, 196.25, 196.34, 198.82, 199.01, 199.07, 199.37, 200.06, 200.77, 201.71, 201.87, 202.55, 202.74, 205.11, 209.02, 209.79, 211.09, 214.63, 215.50, 220.55, 221.62, 221.87, 221.90, 222.45, 225.54, 225.64, 226.41, 226.61, 227.98, 228.47, 229.87, 230.06, 230.28, 233.23, 235.31, 236.04, 236.12, 237.24, 237.64, 238.40, 240.19, 242.52, 242.95, 243.03, 244.14, 246.54, 247.42, 248.71, 249.55, 249.58, 250.26, 250.42, 250.67, 250.75, 255.18, 255.23, 258.16, 259.43, 259.64, 260.77, 263.82, 265.06, 266.37, 268.51, 268.80, 272.51, 275.06, 277.41, 277.85, 279.58, 280.63, 280.88, 281.49, 281.98, 282.22, 282.32, 282.68, 284.67, 285.23, 285.55, 287.05, 287.98, 289.57, 293.69, 293.77, 293.77, 294.13, 295.19, 296.39, 296.76, 300.68, 302.65, 302.84, 303.29, 305.43, 306.33, 307.44, 309.37, 310.04, 310.49, 310.61, 310.81, 313.11, 313.45, 314.61, 314.87, 314.92, 315.88, 316.03, 316.14, 317.55, 319.14, 319.31, 319.52, 320.18, 322.52, 323.50, 324.76, 326.03, 326.54, 327.45, 329.20, 329.36, 329.96, 330.32, 330.71, 331.08, 332.90, 333.06, 335.28, 336.77, 337.61, 338.13, 338.92, 341.12, 343.41, 345.53, 345.91, 346.73, 350.97, 353.93, 354.50, 354.73, 355.19, 356.09, 358.16, 358.97, 361.14, 362.62, 362.97, 367.08, 367.13, 367.82, 367.93, 368.66, 369.21, 369.27, 369.80, 371.72, 371.98, 372.65, 372.85, 376.43, 376.48, 379.54, 380.50, 381.23, 381.71, 384.12, 385.18, 386.04, 386.63, 386.91, 388.91, 392.17, 392.59, 392.95, 393.34, 393.70, 394.54, 395.81, 396.03, 398.52, 400.15, 400.17, 400.67, 401.14, 402.79, 403.06, 404.68, 406.03, 408.66, 409.60, 411.45, 411.96, 412.15, 412.76, 412.90, 413.43, 414.50, 420.75, 420.86, 423.99, 424.04, 424.11, 425.55, 425.66, 425.90, 426.04, 426.45, 427.28, 427.37, 427.88, 428.04, 429.51, 429.69, 430.56, 431.30, 432.78, 433.87, 434.90, 435.27, 436.01, 436.04, 437.76, 438.06, 439.26, 439.28, 440.33, 440.51, 440.54, 440.72, 441.72, 443.21, 445.02, 447.17, 447.77, 448.10, 448.35, 449.54, 449.57, 451.45, 452.15, 453.21, 456.88, 457.32, 459.10, 459.19, 459.35, 460.49, 460.59, 462.52, 462.57, 462.61, 464.54, 466.15, 467.27, 468.13, 469.12, 471.67, 472.27, 472.37, 474.44, 475.17, 476.61, 478.16, 478.61, 480.75, 482.01, 484.74, 484.78, 487.48, 488.31, 488.94, 489.07, 489.14, 490.36, 490.46, 493.53, 493.55, 494.31, 494.50, 495.34, 496.35, 496.91, 497.83, 498.32, 500.42, 500.84, 503.08, 503.10, 504.28, 504.59, 504.72, 504.92, 505.40, 505.73, 507.56, 508.92, 508.98, 510.14, 510.58, 511.75, 512.42, 513.03, 514.04, 514.92, 517.20, 518.20, 518.77, 520.31, 521.06, 521.78, 522.87, 523.10, 523.55, 523.82, 525.48, 529.57, 531.76, 534.50, 534.57, 535.45, 538.14, 539.21, 539.62, 539.96, 545.79, 546.61, 547.00, 547.54, 547.71, 547.98, 548.27, 548.28, 549.85, 550.85, 550.95, 552.68, 553.58, 554.80, 555.13, 556.57, 557.65, 557.72, 557.72, 560.30, 562.28, 562.53, 564.50, 565.36, 565.96, 568.51, 569.09, 569.63, 569.84, 570.06, 570.13, 570.61, 571.67, 572.73, 572.93, 573.34, 574.45, 574.46, 574.71, 575.33, 576.47, 577.00, 578.51, 578.64, 578.88, 579.00, 579.09, 580.14, 583.03, 584.82, 588.21, 590.03, 593.50, 594.41, 594.72, 596.37, 597.57, 603.23, 608.34, 609.53, 609.77, 610.77, 611.16, 612.48, 613.70, 615.77, 616.38, 619.00, 619.28, 619.94, 621.07, 623.42, 623.87, 624.14, 625.60, 627.33, 627.34, 627.58, 628.76, 629.15, 629.21, 629.46, 629.66, 630.74, 633.33, 633.36, 633.77, 634.27, 634.97, 636.40, 641.90, 642.86, 642.86, 643.36, 643.82, 643.85, 644.17, 644.21, 644.52, 645.20, 645.35, 646.40, 648.11, 649.08, 649.62, 650.27, 650.86, 651.89, 652.66, 653.56, 655.96, 655.99, 656.01, 656.03, 657.57, 658.18, 660.90, 662.13, 663.72, 664.06, 665.46, 666.21, 666.63, 666.92, 666.96, 668.14, 669.22, 670.33, 671.34, 672.02, 672.25, 673.05, 673.47, 674.05, 681.31, 682.12, 682.61, 683.07, 683.14, 683.73, 685.24, 686.61, 687.48, 688.48, 688.81, 691.63, 691.88, 693.15, 693.48, 695.50, 696.12, 696.94, 697.68, 701.44, 702.61, 702.81, 703.54, 704.42, 704.64, 705.96, 708.45, 709.95, 713.33, 716.26, 718.36, 718.70, 723.98, 724.74, 724.82, 725.43, 726.97, 729.34, 730.84, 731.84, 735.41, 736.53, 738.00, 738.69, 739.61, 740.59, 742.68, 742.94, 743.20, 743.68, 744.46, 744.65, 744.68, 744.74, 745.29, 748.01, 748.79, 748.85, 749.69, 750.45, 751.38, 751.84, 753.50, 754.86, 757.01, 757.33, 757.77, 757.86, 759.55, 760.11, 760.36, 760.52, 760.71, 761.34, 761.74, 764.57, 765.52, 767.30, 768.04, 768.67, 771.41, 771.94, 772.91, 773.99, 775.01, 777.40, 777.62, 779.71, 779.77, 782.29, 782.79, 783.65, 785.01, 785.51, 786.55, 787.35, 788.12, 788.23, 792.11, 792.81, 793.27, 794.92, 795.10, 795.70, 796.09, 796.80, 797.41, 797.48, 797.60, 801.88, 802.14, 802.58, 803.79, 805.41, 805.80, 805.89, 809.82, 811.49, 811.57, 812.09, 813.27, 813.78, 814.89, 818.71, 820.72, 821.06, 822.00, 822.01, 823.35, 823.70, 826.34, 828.13, 830.66, 830.94, 831.78, 832.04, 832.42, 835.38, 837.69, 838.65, 839.34, 841.02, 843.03, 843.35, 843.88, 844.57, 844.61, 845.02, 845.74, 845.74, 846.58, 846.68, 846.96, 847.72, 848.35, 850.87, 853.06, 853.36, 856.08, 857.20, 857.34, 857.81, 859.52, 859.53, 860.16, 860.26, 860.41, 861.98, 866.54, 868.31, 869.24, 869.84, 871.26, 874.67, 875.90, 877.34, 878.98, 880.30, 881.44, 883.97, 885.30, 885.52, 887.04, 887.72, 889.36, 890.10, 890.50, 891.11, 892.88, 895.53, 895.77, 897.77, 899.80, 900.30, 902.16, 902.71, 903.20, 903.49, 903.62, 903.97, 905.00, 906.92, 907.39, 909.01, 909.22, 909.66, 910.96, 912.58, 913.10, 914.51, 915.36, 916.20, 917.85, 919.59, 920.26, 920.41, 921.92, 922.85, 925.34, 927.07, 927.33, 927.73, 929.28, 930.40, 931.06, 933.76, 933.95, 936.02, 936.27, 936.35, 937.11, 939.13, 939.93, 940.82, 941.61, 941.87, 943.21, 943.68, 944.45, 944.53, 945.52, 945.96, 949.44, 949.88, 952.13, 952.16, 953.34, 953.34, 955.06, 955.19, 958.43, 959.76, 961.45, 961.70, 963.98, 964.09, 964.84, 967.27, 967.66, 968.94, 968.94, 969.09, 969.11, 969.43, 969.95, 971.47, 971.83, 972.99, 973.52, 975.22, 976.11, 976.24, 977.04, 977.98, 980.21, 980.84, 981.07, 981.34, 981.86, 986.37, 987.16, 987.70, 988.31, 989.78, 991.65, 992.61, 994.88, 995.37, 998.65, 999.66, 1001.38, 1001.70, 1002.62, 1003.96, 1004.91, 1004.99, 1005.54, 1005.59, 1007.05, 1008.89, 1011.71, 1011.81, 1012.12, 1013.42, 1014.74, 1015.80, 1016.45, 1017.48, 1020.18, 1020.23, 1021.33, 1021.33, 1022.12, 1022.19, 1022.52, 1022.91, 1023.70, 1024.22, 1024.87, 1026.59, 1028.74, 1031.39, 1031.81, 1032.04, 1033.50, 1034.35, 1035.59, 1036.37, 1037.54, 1040.17, 1041.94, 1043.85, 1045.79, 1050.33, 1050.67, 1052.11, 1054.20, 1055.66, 1056.02, 1056.44, 1058.08, 1058.87, 1059.06, 1059.96, 1063.53, 1063.75, 1064.38, 1065.78, 1066.01, 1066.09, 1067.69, 1068.74, 1069.35, 1069.74, 1073.16, 1073.47, 1073.58, 1074.51, 1075.92, 1076.11, 1076.31, 1078.63, 1079.24, 1079.59, 1080.13, 1082.76, 1085.76, 1086.04, 1086.18, 1088.93, 1089.61, 1089.94, 1091.92, 1092.22, 1093.23, 1093.85, 1096.97, 1097.28, 1098.42, 1101.54, 1103.54, 1103.62, 1103.80, 1103.87, 1106.49, 1107.68, 1107.81, 1108.26, 1111.43, 1111.67, 1112.14, 1113.13, 1114.52, 1114.92, 1118.87, 1118.94, 1120.98, 1121.19, 1123.05, 1124.10, 1126.84, 1127.33, 1127.65, 1128.64, 1128.69, 1129.15, 1129.24, 1130.79, 1132.65, 1132.71, 1133.30, 1133.59, 1134.91, 1135.04, 1137.84, 1142.60, 1145.22, 1148.82, 1148.88, 1149.46, 1150.32, 1151.23, 1152.00, 1152.79, 1155.14, 1157.65, 1158.98, 1160.34, 1160.99, 1162.82, 1163.71, 1164.21, 1165.45, 1166.22, 1167.61, 1168.49, 1172.26, 1175.17, 1176.73, 1177.58, 1178.06, 1180.09, 1181.09, 1181.53, 1181.86, 1181.89, 1183.91, 1186.83, 1187.86, 1188.03, 1190.00, 1190.59, 1192.27, 1192.59, 1193.70, 1196.26, 1198.13, 1198.93, 1200.71, 1200.82, 1201.55, 1201.62, 1204.06, 1206.66, 1206.81, 1207.23, 1208.12, 1211.08, 1211.92, 1212.14, 1213.00, 1213.49, 1213.94, 1215.54, 1217.26, 1218.42, 1218.73, 1220.50, 1221.08, 1222.77, 1222.82, 1223.41, 1225.18, 1226.55, 1227.35, 1227.46, 1228.34, 1229.37, 1229.79, 1231.55, 1232.06, 1233.75, 1234.30, 1234.77, 1234.99, 1235.60, 1236.49, 1236.55, 1237.57, 1237.65, 1239.54, 1239.68, 1240.34, 1240.59, 1240.62, 1240.78, 1241.90, 1241.94, 1242.47, 1242.94, 1242.95, 1243.03, 1243.38, 1244.07, 1251.20, 1255.55, 1257.37, 1260.45, 1260.58, 1263.17, 1269.15, 1269.83, 1270.52, 1271.51, 1271.86, 1272.92, 1273.81, 1276.25, 1276.60, 1276.71, 1280.53, 1281.19, 1281.91, 1282.20, 1284.75, 1285.27, 1285.46, 1287.62, 1288.11, 1288.28, 1288.32, 1288.41, 1289.51, 1290.78, 1290.85, 1292.16, 1292.21, 1292.90, 1293.04, 1293.81, 1293.99, 1294.60, 1294.76, 1294.87, 1295.17, 1295.85, 1296.12, 1296.43, 1296.64, 1296.81, 1300.39, 1301.18, 1302.21, 1303.46, 1304.36, 1308.83, 1308.96, 1309.42, 1309.50, 1309.73, 1310.73, 1311.18, 1311.90, 1311.91, 1312.73, 1313.51, 1315.59, 1317.39, 1318.95, 1319.30, 1320.30, 1320.97, 1322.07, 1323.33, 1323.99, 1325.58, 1326.58, 1328.00, 1328.07, 1335.14, 1335.89, 1339.92, 1340.37, 1341.69, 1345.09, 1345.23, 1345.52, 1345.64, 1346.40, 1346.95, 1347.15, 1347.37, 1347.51, 1347.97, 1348.24, 1348.36, 1352.97, 1353.00, 1356.15, 1357.12, 1359.81, 1362.56, 1362.56, 1369.65, 1370.80, 1371.00, 1372.91, 1373.78, 1375.56, 1375.66, 1375.72, 1375.85, 1377.94, 1379.89, 1383.88, 1384.91, 1385.81, 1386.26, 1387.76, 1389.91, 1391.24, 1391.35, 1391.45, 1392.26, 1394.56, 1394.77, 1395.48, 1396.60, 1399.23, 1400.10, 1400.87, 1401.50, 1402.58, 1403.01, 1403.83, 1408.19, 1409.79, 1410.23, 1412.15, 1412.46, 1415.26, 1416.26, 1417.27, 1419.97, 1420.81, 1421.59, 1423.27, 1426.72, 1427.23, 1428.80, 1430.51, 1431.81, 1431.86, 1434.10, 1435.52, 1436.55, 1440.05, 1440.91, 1441.12, 1441.78, 1442.16, 1442.39, 1446.92, 1448.96, 1451.07, 1453.17, 1454.52, 1454.53, 1454.93, 1458.47, 1460.48, 1460.77, 1462.65, 1465.94, 1466.72, 1468.20, 1468.45, 1469.08, 1470.02, 1470.53, 1471.15, 1472.93, 1472.95, 1474.75, 1475.11, 1475.29, 1475.77, 1476.30, 1476.57, 1480.22, 1482.06, 1482.08, 1483.24, 1485.47, 1485.66, 1487.16, 1487.20, 1487.61, 1489.16, 1492.59, 1494.49, 1494.93, 1496.86, 1498.37, 1499.08, 1499.23, 1499.33, 1503.50, 1506.49, 1508.37, 1508.83, 1509.07, 1510.18, 1512.55, 1512.94, 1513.14, 1513.68, 1515.40, 1516.33, 1517.79, 1518.65, 1518.88, 1519.40, 1520.12, 1522.01, 1522.33, 1522.97, 1524.79, 1525.00, 1526.11, 1530.28, 1530.60, 1532.60, 1532.82, 1533.61, 1534.02, 1534.29, 1535.35, 1535.36, 1537.08, 1538.59, 1540.08, 1541.63, 1542.41, 1542.67, 1545.66, 1546.69, 1547.33, 1549.23, 1549.32, 1549.85, 1549.95, 1551.36, 1552.43, 1553.36, 1553.88, 1555.40, 1556.30, 1558.24, 1559.30, 1561.13, 1561.13, 1561.48, 1563.90, 1568.70, 1568.90, 1568.97, 1570.58, 1570.61, 1571.68, 1572.14, 1572.30, 1572.32, 1575.29, 1575.35, 1577.27, 1577.35, 1577.72, 1579.00, 1580.19, 1581.09, 1581.38, 1585.09, 1585.14, 1587.52, 1588.86, 1589.89, 1596.88, 1598.87, 1599.44, 1599.67, 1605.65, 1605.83, 1605.88, 1606.29, 1607.05, 1607.10, 1607.45, 1607.60, 1607.96, 1608.85, 1609.67, 1615.28, 1616.31, 1616.54, 1616.88, 1618.38, 1618.73, 1621.66, 1623.00, 1624.63, 1626.24, 1626.75, 1629.00, 1629.37, 1629.96, 1631.36, 1633.02, 1633.84, 1634.61, 1635.04, 1638.15, 1638.36, 1638.77, 1640.00, 1640.09, 1640.11, 1640.47, 1640.63, 1644.29, 1644.63, 1647.52, 1647.78, 1648.05, 1649.21, 1651.16, 1652.76, 1654.00, 1654.32, 1655.72, 1658.55, 1658.81, 1659.35, 1659.89, 1660.40, 1660.48, 1662.69, 1664.29, 1664.71, 1666.07, 1668.77, 1670.48, 1670.57, 1671.51, 1673.22, 1673.42, 1673.48, 1673.66, 1674.67, 1683.65, 1688.53, 1691.31, 1695.19, 1695.52, 1697.55, 1700.58, 1701.14, 1702.84, 1702.97, 1706.66, 1709.13, 1710.21, 1710.51, 1710.78, 1711.37, 1711.67, 1712.19, 1712.62, 1718.40, 1718.76, 1719.29, 1719.59, 1720.01, 1720.08, 1723.25, 1723.43, 1723.59, 1728.52, 1728.68, 1728.86, 1730.33, 1731.45, 1731.54, 1732.17, 1734.45, 1736.93, 1738.36, 1739.27, 1740.19, 1740.31, 1744.06, 1744.64, 1745.01, 1746.79, 1748.62, 1748.75, 1748.82, 1749.69, 1750.42, 1751.96, 1754.69, 1755.82, 1755.91, 1757.59, 1757.66, 1758.12, 1758.18, 1759.50, 1761.97, 1762.35, 1763.23, 1764.59, 1767.19, 1767.87, 1769.48, 1769.59, 1771.36, 1771.45, 1773.59, 1776.24, 1777.62, 1777.62, 1778.74, 1779.21, 1780.00, 1780.72, 1780.89, 1783.60, 1784.24, 1784.37, 1787.48, 1789.94, 1791.30, 1791.51, 1792.68, 1793.69, 1794.69, 1795.10, 1795.50, 1796.48, 1796.78, 1797.04, 1799.65, 1804.85, 1805.27, 1806.88, 1807.19, 1809.17, 1810.14, 1810.63, 1812.93, 1813.65, 1814.20, 1816.23, 1818.03, 1819.57, 1820.12, 1822.45, 1823.00, 1823.86, 1824.32, 1824.48, 1825.07, 1825.65, 1826.16, 1827.21, 1827.71, 1829.70, 1830.45, 1831.68, 1833.82, 1834.59, 1835.10, 1835.11, 1840.90, 1841.68, 1842.47, 1847.78, 1848.75, 1849.05, 1850.97, 1852.33, 1852.79, 1854.44, 1855.48, 1856.74, 1857.45, 1857.87, 1859.90, 1860.18, 1860.65, 1861.59, 1862.00, 1863.00, 1868.52, 1868.62, 1868.78, 1868.85, 1869.49, 1870.84, 1871.20, 1872.24, 1873.21, 1874.71, 1874.73, 1876.03, 1877.93, 1880.08, 1881.05, 1882.60, 1884.81, 1885.21, 1887.24, 1888.89, 1892.34, 1894.21, 1894.22, 1894.37, 1894.66, 1895.20, 1895.21, 1897.34, 1898.88, 1899.26, 1900.06, 1900.59, 1901.08, 1901.26, 1901.52, 1902.59, 1909.10, 1909.47, 1909.77, 1912.13, 1913.61, 1914.91, 1917.79, 1917.86, 1918.22, 1920.30, 1921.11, 1922.07, 1922.44, 1924.57, 1926.00, 1926.47, 1926.82, 1927.88, 1928.49, 1928.66, 1928.84, 1929.25, 1930.84, 1933.26, 1933.28, 1934.28, 1935.14, 1936.76, 1937.85, 1938.06, 1939.38, 1939.60, 1939.73, 1940.77, 1941.52, 1945.09, 1945.78, 1946.15, 1949.33, 1949.43, 1950.12, 1950.52, 1950.68, 1951.06, 1951.55, 1952.14, 1952.23, 1954.02, 1956.09, 1956.64, 1958.04, 1959.09, 1959.64, 1961.67, 1964.12, 1966.23, 1966.73, 1970.97, 1975.49, 1975.90, 1976.88, 1979.37, 1980.52, 1981.22, 1982.14, 1984.83, 1985.43, 1986.57, 1986.93, 1987.17, 1988.04, 1988.18, 1988.48, 1990.15, 1992.65, 1992.95, 1994.95, 1995.10, 1995.36, 1995.86, 1996.62, 2000.02, 2001.15, 2001.89, 2003.97, 2005.78, 2008.76, 2008.98, 2010.35, 2010.81, 2012.33, 2015.33, 2015.69, 2016.24, 2016.39, 2016.81, 2016.92, 2017.32, 2018.32, 2023.28, 2025.21, 2025.25, 2025.59, 2028.21, 2030.20, 2031.21, 2031.60, 2033.27, 2033.68, 2034.30, 2037.41, 2039.24, 2042.85, 2043.16, 2043.29, 2043.55, 2043.74, 2045.71, 2047.02, 2049.50, 2050.01, 2055.38, 2055.52, 2055.72, 2056.47, 2059.79, 2059.87, 2060.24, 2063.17, 2063.51, 2065.18, 2067.35, 2068.65, 2069.68, 2070.68, 2070.92, 2071.13, 2071.49, 2072.47, 2072.84, 2072.98, 2075.25, 2075.28, 2076.01, 2076.37, 2076.72, 2077.76, 2078.37, 2078.79, 2078.83, 2079.64, 2081.06, 2081.95, 2082.61, 2084.46, 2085.23, 2085.82, 2087.47, 2088.12, 2090.53, 2091.13, 2092.34, 2092.39, 2093.34, 2094.10, 2094.47, 2096.91, 2098.03, 2100.35, 2101.22, 2102.75, 2104.99, 2105.30, 2106.08, 2106.71, 2106.88, 2107.67, 2108.44, 2108.76, 2109.70, 2111.36, 2112.60, 2113.70, 2115.01, 2115.51, 2116.00, 2117.32, 2117.74, 2119.13, 2119.92, 2121.58, 2122.34, 2124.23, 2124.34, 2125.63, 2128.96, 2129.36, 2130.93, 2131.31, 2132.03, 2133.50, 2134.36, 2136.23, 2137.03, 2137.19, 2138.01, 2139.31, 2140.82, 2142.31, 2146.98, 2148.12, 2148.29, 2148.77, 2152.56, 2152.65, 2153.07, 2156.96, 2157.67, 2159.58, 2162.39, 2163.51, 2163.98, 2164.46, 2165.14, 2165.29, 2166.55, 2166.59, 2169.48, 2171.39, 2172.36, 2174.05, 2175.12, 2177.07, 2177.62, 2182.29, 2186.57, 2187.46, 2187.62, 2190.50, 2191.67, 2191.95, 2193.18, 2193.67, 2193.91, 2195.21, 2198.01, 2199.49, 2199.82, 2199.90, 2200.39, 2200.57, 2202.02, 2204.25, 2205.33, 2206.76, 2207.00, 2208.28, 2213.41, 2214.60, 2217.01, 2221.05, 2221.60, 2221.70, 2224.63, 2225.28, 2227.73, 2231.00, 2232.62, 2232.85, 2233.14, 2234.32, 2235.71, 2237.22, 2237.24, 2237.61, 2238.05, 2238.53, 2241.08, 2242.72, 2242.93, 2243.37, 2243.73, 2244.48, 2244.71, 2246.75, 2246.95, 2247.81, 2248.64, 2249.23, 2250.50, 2251.20, 2251.44, 2251.85, 2255.04, 2256.01, 2256.74, 2257.76, 2258.80, 2259.49, 2262.25, 2264.53, 2264.91, 2265.19, 2265.55, 2266.08, 2266.08, 2266.76, 2266.80, 2270.42, 2272.23, 2273.02, 2273.27, 2274.60, 2275.31, 2277.82, 2278.73, 2280.31, 2280.75, 2280.76, 2283.96, 2286.47, 2286.64, 2286.73, 2288.95, 2289.78, 2291.07, 2291.25, 2293.09, 2297.64, 2298.86, 2299.47, 2299.51, 2301.17, 2301.32, 2301.54, 2303.34, 2303.63, 2305.03, 2306.93, 2307.69, 2308.02, 2308.45, 2309.40, 2310.35, 2311.28, 2312.23, 2312.73, 2315.56, 2315.82, 2315.93, 2316.50, 2317.09, 2317.77, 2317.88, 2320.86, 2320.96, 2321.38, 2321.54, 2321.83, 2321.97, 2323.66, 2325.12, 2325.20, 2325.82, 2326.32, 2327.84, 2328.45, 2328.97, 2329.00, 2331.46, 2332.51, 2334.82, 2335.33, 2336.20, 2336.66, 2336.85, 2337.03, 2338.28, 2342.33, 2342.83, 2344.18, 2344.78, 2345.06, 2345.37, 2345.61, 2348.44, 2350.20, 2350.06, /*	
		 58,59, 210,
						211, 
						364,370,390,400,500,
						517,
						670,700,750,800,810,820,821,
						823,
						976,1128,
						1129,1200,1250,1281,
						1282,1434,
						1435,1587,
						1588,1650,1740,
						1741,1893,
						1894,2000,2001,2046,
						2047,2199,
						2200,2300,2305,2306,2353
						
						
						
						/*
 338.92 , 
2273.02 , 
1163.71 ,
1730.33 ,
2182.29 ,
 440.33 ,
 
1190.00 ,
1793.69 ,
 757.33 ,
2033.68 ,
 488.31 ,
1375.85 ,
2174.05 ,
 570.06 ,
 293.77 ,
2132.03 ,
1553.88 ,
 498.32 ,
2142.31 ,
1292.16 ,
2078.37 ,
2081.06 ,
2109.70 ,
 238.40 ,
  68.20 ,
2128.96 , 
 696.12 ,
 615.77 ,
1988.48 ,
1533.61 ,
1079.24 ,
2233.14 ,
2070.68 ,
 775.01 ,
 805.41 ,
1441.12 ,
 557.72 ,
 975.22 ,
1888.89 ,
1415.26 ,
1644.63 ,
2165.14 ,
 200.06 ,
1067.69 ,
2237.61 ,
2305.03 ,
 779.71 ,
 572.73 ,
1454.53 ,
1183.91 ,
 101.15 ,
1240.34 ,
1862.00 ,
1290.85 ,
 100.30 ,
 489.07 ,
 590.03 ,
1936.76 ,
1022.12 ,
2326.32 ,
1372.91 ,
 572.93 ,
1225.18 ,
1021.33 ,
1754.69 ,
1709.13 ,
 919.59 ,
1282.20 ,
1841.68 ,
2206.76 ,
1059.96 ,
 427.28 ,
2257.76 ,
 165.78 ,
2336.20 ,
 964.84 ,
2200.57 ,
 740.59 ,
 337.61 ,
2148.12 ,
 666.21 ,
 319.31 ,
 338.13 ,
2034.30 ,
 394.54 ,
2124.23 ,
 490.46 ,
 429.51 ,
1022.19 ,
 105.34 ,
1519.40 ,
 314.92 ,
1348.36 ,
 451.45 ,
2094.10 ,
1952.14 ,
1825.65 ,
 427.37 ,
1054.20 ,
1857.45 ,
1188.03 ,
 757.77 ,
1113.13 ,
1399.23 ,
1503.50 ,
 835.38 ,
1992.95 ,
 302.65 ,
1734.45 ,
1011.81 ,
1240.78 ,
2119.13 , 
1585.09 ,
 227.98 ,
 484.78 ,
1132.65 ,
1606.29 ,
 880.30 ,
1175.17 ,
1835.10 ,
1670.57 ,
 306.33 ,
 329.36 ,
 805.80 ,
  99.03 , 
2115.01 ,
2008.98 ,
2345.06 ,
 195.94 ,
2321.97 , 
 668.14 ,
2321.83 ,
2325.12 ,
1644.29 ,
 130.61 ,
1213.00 ,
1966.73 ,
 593.50 ,
1472.93 ,
 285.55 ,
1956.09 ,
 229.87 ,
 196.25 ,
2232.85 ,
 467.27 ,
2148.77 ,
1312.73 ,
  68.82 ,
 512.42 ,
 148.12 ,
1055.66 ,
1241.94 ,
 388.91 ,
 500.42 ,
2084.46 ,
 959.76 ,
1465.94 ,
1499.23 ,
1510.18 ,
2093.34 ,
2075.28 ,
 976.24 ,
1842.47 ,
2336.85 ,
1771.45 ,
1884.81 ,
1608.85 ,
1513.68 ,
1222.77 ,
2195.21 ,
2199.82 ,
1133.30 ,
 153.69 ,
2273.27 ,
1198.93 ,
 579.00 ,
 809.82 ,
1900.59 ,
1485.66 ,
1830.45 ,
1545.66 ,
1069.74 ,
1950.68 ,
 289.57 ,
1894.22 ,
 750.45 ,
1928.49 ,
 476.61 ,
 295.19 ,
1927.88 ,
 767.30 ,
 386.04 ,
1152.00 ,
1638.36 ,
 652.66 ,
2175.12 ,
2025.59 ,
1423.27 ,
1391.45 ,
2043.55 ,
 820.72 ,
1158.98 ,
1271.51 ,
 980.84 ,
1880.08 ,
2152.65 ,
 126.51 ,
1098.42 ,
1930.84 ,
1572.32 ,
 513.03 ,
1345.09 ,
 877.34 ,
 967.27 ,
 969.11 ,
1976.88 ,
 738.69 ,
1288.32 ,
1410.23 ,
2111.36 ,
1792.68 ,
1795.10 ,
 385.18 ,
2217.01 ,
 322.52 ,
1022.52 ,
1731.54 ,
2119.92 ,
1290.78 ,
 655.96 ,
1370.80 ,
1994.95 ,
1403.01 ,
2075.25 ,
 282.68 ,
 576.47 ,
1581.38 ,
1236.49 ,
1177.58 ,
 788.23 ,
1834.59 ,
1780.00 ,
1588.86 ,
1475.29 ,
1647.52 ,
 944.53 ,
2248.64 ,
 981.07 ,
 108.66 ,
 156.14 ,
2251.20 ,
1577.35 ,
2298.86 ,
 768.67 ,
 925.34 ,
 771.94 ,
 636.40 ,
 494.31 ,
1868.62 ,
 874.67 ,
1236.55 ,
1151.23 ,
 937.11 ,
 123.48 ,
2266.76 ,
 268.80 ,
 744.74 ,
 242.95 ,
 474.44 ,
1744.64 ,
 902.71 , 
 215.50 ,
1272.92 ,
 436.01 ,
 987.70 ,
1596.88 ,
 828.13 ,
 547.00 ,
 765.52 ,
2327.84 ,
1933.28 ,
1711.67 ,
1796.78 ,
 409.60 ,
 300.68 ,
1474.75 ,
1945.78 ,
2104.99 ,
 472.27 ,
1347.97 ,
 910.96 ,
1720.01 ,
 578.88 ,
 547.98 ,
2138.01 ,
1395.48 ,
 146.23 ,
1134.91 ,
 369.21 ,
1097.28 ,
 716.26 ,
 247.42 ,
1575.35 ,
 609.77 ,
1137.84 ,
1379.89 ,
 749.69 ,
1512.55 ,
2232.62 ,
1626.75 ,
 760.52 ,
 939.93 ,
1818.03 ,
1335.89 ,
 895.53 ,
1652.76 ,
1362.56 ,
 943.68 ,
1736.93 ,
 594.41 ,
1525.00 ,
 759.55 ,
1391.24 ,
1460.48 ,
1547.33 ,
1428.80 ,
2262.25 ,
1549.23 ,
1748.82 ,
 748.01 ,
1385.81 ,
 504.72 ,
 324.76 ,
1508.83 ,
 981.34 ,
1522.97 ,
2338.28 ,
 449.57 ,
1598.87 ,
 398.52 ,
1386.26 ,
 642.86 ,
 150.36 ,
 462.52 ,
2202.02 ,
1857.87 , 
 546.61 ,
1882.60 ,
 927.33 ,
1034.35 ,
  95.61 ,
1201.55 , 
2140.82 ,
1723.43 ,
1534.02 ,
2247.81 ,
1059.06 ,
2125.63 ,
 785.01 ,
 403.06 ,
1986.93 ,
1231.55 ,
2043.29 ,
 462.61 ,
2193.67 ,
 456.88 ,
 650.86 ,
 869.24 ,
1446.92 ,
  96.07 ,
1695.19 , 
2244.48 ,
1400.10 ,
 813.27 ,
 539.62 ,
 643.85 ,
1002.62 ,
1852.33 ,
1616.88 ,
1810.14 ,
1673.48 ,
 500.84 ,
 861.98 ,
 408.66 ,
1909.77 ,
2242.72 ,
 574.71 ,
 900.30 ,
1213.49 ,
 225.54 ,
2031.21 ,
2289.78 ,
1056.44 ,
2069.68 ,
1328.00 ,
1476.30 ,
 368.66 ,
 813.78 ,
1863.00 ,
 404.68 ,
 392.59 ,
 361.14 ,
2045.71 ,
2336.66 ,
1470.53 ,
1860.65 ,
1008.89 ,
 691.63 ,
 922.85 ,
1242.47 ,
 507.56 ,
1155.14 ,
2076.72 ,
 696.94 ,
2000.02 ,
 384.12 ,
1101.54 ,
 194.60 ,
1317.39 ,
1280.53 ,
1417.27 ,
2265.19 ,
 305.43 ,
 193.34 ,
2049.50 ,
2094.47 ,
1024.22 ,
 354.73 ,
1269.83 ,
 857.34 ,
 860.16 ,
1129.15 ,
2225.28 ,
 520.31 ,
1295.17 ,
2076.37 ,
 853.06 ,
 739.61 ,
 201.71 ,
2317.88 ,
 658.18 ,
1719.29 ,
 760.71 ,
 335.28 ,
 412.15 ,
 255.23 ,
 846.68 ,
 643.36 ,
 396.03 ,
1589.89 ,
 176.14 ,
1848.75 ,
2246.95 ,
 255.18 ,
1270.52 ,
1076.11 ,
 293.69 ,
 860.26 ,
1311.18 ,
 971.47 ,
1658.55 ,
 777.40 ,
2350.06 ,
 757.86 ,
 574.46 ,
1933.26 ,
 777.62 ,
 489.14 ,
 547.54 ,
1773.59 ,
1181.86 ,
1235.60 ,
 110.30 ,
1244.07 ,
1434.10 ,
1180.09 ,
1164.21 ,
1263.17 ,
1489.16 ,
 822.00 ,
2332.51 ,
2344.78 ,
2235.71 ,
 260.77 ,
1311.91 ,
1532.60 ,
 878.98 ,
1871.20 ,
2293.09 ,
 441.72 ,
2033.27 ,
1959.64 ,
 786.55 ,
2082.61 ,
 429.69 ,
 555.13 ,
 687.48 ,
 853.36 ,
 523.82 ,
1242.94 ,
 794.92 ,
1780.72 ,
2237.24 ,
2199.49 ,
1618.38 ,
 761.74 ,
 562.53 ,
1121.19 ,
1563.90 ,
2299.51 ,
1080.13 ,
1292.21 ,
  73.59 ,
 702.61 ,
 250.26 ,
1872.24 ,
 237.64 ,
1229.37 ,
 649.08 ,
1120.98 ,
2085.82 ,
2286.47 ,
1168.49 ,
2328.97 ,
2030.20 ,
1149.46 ,
2221.70 ,
1918.22 ,
1107.68 ,
 744.65 ,
1213.94 ,
 623.87 ,
1126.84 ,
1771.36 ,
 381.23 ,
2303.63 ,
1759.50 ,
 162.65 ,
1950.12 ,
1926.47 ,
1221.08 ,
2312.23 ,
 196.34 ,
2316.50 ,
1673.66 ,
2227.73 ,
 136.27 ,
1431.86 ,
1076.31 ,
1784.37 ,
 562.28 ,
 303.29 ,
 665.46 ,
1954.02 ,
1492.59 ,
 548.27 ,
2171.39 ,
1909.47 ,
 367.08 ,
1710.51 ,
1093.23 ,
2148.29 ,
 209.79 ,
2258.80 ,
 195.30 ,
1499.08 ,
2137.03 ,
1451.07 ,
1939.38 ,
1649.21 ,
2100.35 ,
 772.91 ,
 580.14 ,
 754.86 ,
2250.50 ,
2308.02 ,
 165.09 ,
2134.36 ,
 550.85 ,
1296.64 ,
 967.66 ,
2266.08 ,
1285.46 ,
1922.07 ,
1626.24 ,
1255.55 ,
 371.72 ,
2277.82 ,
 912.58 ,
 554.80 ,
1111.67 ,
1187.86 ,
 629.21 ,
2153.07 ,
 431.30 ,
 657.57 ,
1901.26 ,
1419.97 ,
1571.68 ,
1777.62 ,
 199.37 ,
 386.63 ,
1901.08 ,
1659.35 ,
2130.93 ,
 656.03 ,
1758.12 ,
2205.33 ,
1241.90 ,
2096.91 ,
 805.89 ,
 329.20 ,
2078.79 ,
1605.88 ,
1320.97 ,
 354.50 ,
 623.42 ,
 892.88 ,
1387.76 ,
 944.45 ,
2076.01 ,
 735.41 ,
2207.00 ,
  85.04 ,
 672.25 ,
 412.76 ,
1568.70 ,
1823.86 ,
2317.09 ,
1852.79 ,
2037.41 ,
1778.74 ,
1296.12 ,
1868.78 ,
 723.98 ,
 969.95 ,
1585.14 ,
 505.73 ,
 760.36 ,
 748.85 ,
1952.23 ,
 949.44 ,
1400.87 ,
1869.49 ,
2237.22 ,
2350.20 ,
1005.54 ,
1660.48 ,
 889.36 ,
1859.90 ,
1664.29 ,
1995.10 ,
2264.53 ,
 230.28 ,
1058.08 ,
1512.94 ,
2056.47 ,
2043.16 ,
1835.11 ,
1223.41 ,
 156.76 ,
1607.45 ,
 496.91 ,
1178.06 ,
1674.67 ,
  90.10 ,
1532.82 , 
1638.15 ,
1352.97 ,
 646.40 ,
1310.73 ,
1206.66 ,
2070.92 ,
1648.05 ,
1797.04 ,
2092.39 ,
2328.45 ,
2299.47 ,
 221.87 ,
2018.32 ,
1218.42 ,
1712.19 ,
  82.00 ,
1787.48 , 
 236.12 ,
 400.15 ,
 897.77 ,
1949.43 ,
1740.31 ,
2280.31 ,
 535.45 ,
 981.86 ,
1293.81 ,
1874.71 ,
1654.32 ,
1323.33 ,
1037.54 ,
 797.41 ,
1472.95 ,
1403.83 ,
2088.12 ,
1462.65 ,
 704.64 ,
 190.04 ,
1861.59 ,
1784.24 ,
 425.55 ,
 655.99 ,
1112.14 ,
1876.03 ,
 225.64 ,
1522.01 ,
1085.76 ,
1215.54 ,
2221.60 ,
1271.86 ,
 226.41 ,
1016.45 ,
 708.45 ,
2005.78 ,
1840.90 ,
1239.54 ,
1014.74 ,
 669.22 ,
1561.48 ,
 977.04 ,
 666.96 ,
 802.58 ,
1217.26 ,
 569.63 ,
2297.64 ,
 961.70 ,
1701.14 ,
 279.58 ,
1827.21 ,
 916.20 ,
1181.09 ,
1673.42 ,
857.81 ,
1004.91 ,
1273.81 ,
2198.01 ,
2092.34 ,
 594.72 ,
1412.15 ,
 510.58 ,
 627.33 ,
 495.34 ,
2055.52 ,
 376.48 ,
2063.17 ,
 237.24 ,
 420.86 ,
1288.11 ,
 903.20 ,
 905.00 ,
2275.31 ,
 633.77 ,
1165.45 ,
 343.41 ,
2331.46 ,
2122.34 ,
 154.85 ,
 425.66 ,
1934.28 ,
1211.08 ,
1702.84 ,
1281.19 ,
 362.97 ,
1476.57 ,
 490.36 ,
1794.69 ,
1755.91 ,
 413.43 ,
2214.60 ,
 315.88 ,
1549.95 ,
1767.19 ,
 913.10 ,
2344.18 ,
 170.93 ,
 211.09 ,
1466.72 ,
1089.94 ,
 841.02 ,
2238.05 ,
1822.45 ,
 504.28 ,
1416.26 ,
 610.77 ,
 742.68 ,
 430.56 ,
1599.44 ,
 672.02 ,
 987.16 ,
 743.68 ,
 550.95 ,
1607.60 ,
1868.85 ,
 508.92 ,
1442.39 ,
1718.40 ,
1542.67 ,
 940.82 ,
 933.76 ,
2047.02 ,
2256.74 ,
1114.92 ,
 724.82 ,
2213.41 ,
1056.02 ,
 395.81 ,
1234.30 ,
1856.74 ,
400.17  ,
1320.30 ,
1939.73 ,
704.42  ,
1045.79 ,
 890.10 ,
 565.96 ,
1226.55 ,
  60.92 ,
1475.77 , 
1807.19 ,
1814.20 ,
 634.97 ,
2190.50 ,
1572.14 ,
1133.59 ,
1629.37 ,
 202.55 ,
1825.07 ,
1902.59 , 
 372.85 ,
 686.61 ,
 949.88 ,
1032.04 ,
 480.75 ,
2055.72 ,
 191.84 ,
 570.61 ,
1750.42 ,
2008.76 , 
 460.49 ,
1575.29 ,
 903.97 ,
 927.73 ,
1240.62 ,
 163.53 ,
 462.57 ,
 578.51 ,
1791.51 ,
1243.03 ,
1509.07 ,
 619.94 ,
1769.48 ,
 818.71 ,
2098.03 ,
 560.30 ,
 811.57 ,
1073.58 ,
1849.05 ,
 968.94 ,
 633.33 ,
 240.19 ,
2166.59 ,
 358.16 ,
1281.91 ,
1341.69 ,
1311.90 ,
1804.85 ,
 426.45 ,
 504.59 ,
 666.92 ,
1518.88 ,
 263.82 ,
 826.34 ,
2077.76 ,
1535.36 ,
 459.10 ,
2078.83 ,
2187.46 ,
 616.38 ,
1309.50 ,
1289.51 ,
1348.24 ,
 131.13 ,
 845.74 ,
1810.63 ,
1697.55 ,
 645.20 ,
2107.67 ,
1827.71 ,
2063.51 ,
1227.46 ,
2117.74 ,
 671.34 ,
2112.60 ,
 249.55 ,
1073.47 ,
1063.53 ,
1346.95 ,
1494.49 ,
  91.48 ,
 625.60 ,
 392.95 ,
 633.36 ,
1796.48 ,
1160.99 ,
1313.51 ,
1356.15 ,
 628.76 ,
1292.90 ,
 745.29 ,
 785.51 ,
 843.35 ,
1541.63 ,
1181.89 ,
 406.03 ,
2320.86 ,
1192.27 ,
  64.47 ,
 380.50 ,
1659.89 ,
1190.59 ,
 453.21 ,
1050.33 ,
 556.57 ,
1294.76 ,
 844.61 ,
1011.71 ,
 275.06 ,
 226.61 ,
1559.30 ,
1103.54 ,
1855.48 ,
1900.06 ,
1284.75 ,
1986.57 ,
1913.61 ,
1924.57 ,
1577.72 ,
1616.54 ,
2079.64 ,
1315.59 ,
 941.87 ,
1308.96 ,
2085.23 ,
1988.18 ,
 724.74 ,
1894.21 ,
 630.74 ,
1587.52 ,
1549.32 ,
1926.00 ,
 793.27 ,
1020.18 ,
1860.18 ,
 920.26 ,
 205.11 ,
 160.53 ,
 644.52 ,
 443.21 ,
 832.42 ,
1257.37 ,
  59.20 ,
1761.97 , 
1777.62 ,
 316.03 ,
 883.97 ,
 266.37 ,
1058.87 ,
2172.36 ,
 557.72 ,
1088.93 ,
1546.69 ,
 903.62 ,
 393.70 ,
2156.96 ,
1607.05 ,
 773.99 ,
 980.21 ,
  60.71 ,
 952.13 ,
 902.16 ,
 350.97 ,
 549.85 ,
2199.90 ,
2301.32 ,
2108.76 ,
1847.78 ,
2025.25 ,
 744.46 ,
1471.15 ,
 287.05 ,
1421.59 ,
1887.24 ,
 725.43 ,
 568.51 ,
2204.25 ,
1454.52 ,
2152.56 ,
 152.75 ,
 557.65 ,
1561.13 ,
 356.09 ,
2025.21 ,
 823.35 ,
1469.08 ,
1629.96 ,
 246.54 ,
2187.62 ,
1570.61 ,
2265.55 ,
1308.83 ,
 523.55 ,
1064.38 ,
2315.56 ,
1748.75 ,
 496.35 ,
1710.21 ,
1353.00 ,
 760.11 ,
 570.13 ,
1638.77 ,
2306.93 ,
 930.40 ,
1494.93 ,
 651.89 ,
1128.69 ,
1731.45 ,
2286.73 ,
2186.57 ,
1186.83 ,
1240.59 ,
2102.75 ,
 764.57 ,
2060.24 ,
2256.01 ,
2136.23 ,
1877.93 ,
 627.58 ,
2266.08 ,
 367.93 ,
1990.15 ,
2108.44 ,
 355.19 ,
 885.52 ,
1982.14 ,
 903.49 ,
1561.13 ,
1234.99 ,
1162.82 ,
1624.63 ,
1150.32 ,
1475.11 ,
 472.37 ,
1654.00 ,
2191.67 ,
 447.77 ,
1482.06 ,
  86.79 ,
 613.70 ,
1028.74 ,
 909.66 ,
2345.61 ,
 995.37 ,
1568.90 ,
 259.43 ,
1920.30 ,
1516.33 ,
1157.65 ,
 314.87 ,
1118.87 ,
2162.39 ,
 753.50 ,
1013.42 ,
2105.30 ,
 518.77 ,
1294.60 ,
1323.99 ,
2193.18 ,
 358.97 ,
1322.07 ,
 190.71 ,
 523.10 ,
 972.99 ,
1103.62 ,
 961.45 ,
2129.36 ,
1530.60 ,
 336.77 ,
1496.86 ,
1535.35 ,
1228.34 ,
 844.57 ,
 464.54 ,
1662.69 ,
 856.08 ,
2039.24 ,
 437.76 ,
 682.61 ,
1430.51 ,
1196.26 ,
1482.08 ,
 287.98 ,
1577.27 ,
1809.17 ,
1740.19 ,
 199.01 ,
 268.51 ,
1460.77 ,
 843.03 ,
 401.14 ,
1748.62 ,
 757.01 ,
1431.81 ,
 939.13 ,
 534.50 ,
2321.38 ,
 703.54 ,
1556.30 ,
1551.36 ,
1670.48 ,
1004.99 ,
1558.24 ,
 221.90 ,
1075.92 ,
 330.32 ,
1276.71 ,
1581.09 ,
2264.91 ,
 681.31 ,
1294.87 ,
1898.88 ,
1301.18 ,
 144.06 ,
1022.91 ,
1984.83 ,
1192.59 ,
1269.15 ,
 353.93 ,
1106.49 ,
 705.96 ,
  83.17 ,
1629.00 , 
 992.61 ,
1200.82 ,
 102.61 ,
1651.16 ,
 751.38 ,
1607.10 ,
 583.03 ,
 887.72 ,
1744.06 ,
2072.84 ,
 452.15 ,
1304.36 ,
1935.14 ,
2334.82 ,
 393.34 ,
 432.78 ,
1633.84 ,
2159.58 ,
1357.12 ,
1779.21 ,
1912.13 ,
1369.65 ,
2016.92 ,
 329.96 ,
1436.55 ,
2067.35 ,
2071.13 ,
 812.09 ,
1454.93 ,
 367.13 ,
1288.41 ,
1207.23 ,
 822.01 ,
 986.37 ,
 936.02 ,
 317.55 ,
 693.48 ,
 641.90 ,
1917.79 ,
1024.87 ,
 191.03 ,
2010.35 ,
 433.87 ,
1375.56 ,
 596.37 ,
 435.27 ,
1347.37 ,
 801.88 ,
1812.93 ,
 214.63 ,
 571.67 ,
 569.09 ,
2068.65 ,
 846.58 ,
 162.94 ,
 518.20 ,
 478.16 ,
2106.08 ,
 156.96 ,
 136.79 ,
1739.27 ,
 323.50 ,
 838.65 ,
1668.77 ,
 634.27 ,
 574.45 ,
1041.94 ,
2016.39 ,
 104.15 ,
1829.70 ,
 309.37 ,
2274.60 ,
2043.74 ,
1066.01 ,
 493.53 ,
2307.69 ,
1508.37 ,
1302.21 ,
2001.15 , 
 656.01 ,
 447.17 ,
 736.53 ,
 899.80 ,
 597.57 ,
2278.73 ,
1392.26 ,
 915.36 ,
 319.14 ,
 160.36 ,
 244.14 ,
1922.44 ,
 236.04 ,
 701.44 ,
 131.63 ,
 688.81 ,
 284.67 ,
1723.59 ,
 531.76 ,
1995.36 ,
 881.44 ,
 730.84 ,
 931.06 ,
2017.32 , 
 538.14 ,
 999.66 ,
 445.02 ,
1868.52 ,
 369.27 ,
 282.32 ,
1763.23 ,
2133.50 ,
 837.69 ,
 845.02 ,
  94.03 ,
 400.67 ,
1043.85 ,
  62.76 ,
1295.85 , 
1806.88 ,
2259.49 ,
1148.82 ,
1873.21 ,
2028.21 ,
1660.40 ,
1328.07 ,
1234.77 ,
 553.58 ,
1468.20 ,
1658.81 ,
1751.96 ,
1078.63 ,
1723.25 ,
 929.28 ,
1542.41 ,
1988.04 ,
1951.06 ,
 425.90 ,
2163.51 ,
 788.12 ,
1118.94 ,
 644.21 ,
2165.29 ,
 314.61 ,
1347.15 ,
1762.35 ,
1198.13 , 
 653.56 ,
1780.89 ,
 936.35 ,
 503.08 ,
 839.34 ,
1440.91 ,
 345.53 ,
 691.88 ,
1031.39 ,
1517.79 ,
1015.80 ,
1711.37 ,
1093.85 ,
1402.58 ,
 648.11 ,
 797.60 ,
2191.95 ,
1941.52 ,
1124.10 ,
1114.52 ,
2286.64 ,
 362.62 ,
 436.04 ,
1553.36 , 
 683.14 ,
 510.14 ,
2251.85 ,
1526.11 ,
2177.62 ,
 662.13 ,
 642.86 ,
2001.89 ,
1498.37 ,
1833.82 ,
1640.00 ,
 831.78 ,
 209.02 ,
2208.28 ,
1127.33 ,
 695.50 ,
 379.54 ,
2015.69 ,
 511.75 ,
1945.09 ,
 116.83 ,
1552.43 ,
2238.53 ,
1345.23 ,
 609.53 ,
1130.79 ,
1082.76 ,
 112.50 ,
1129.24 ,
 953.34 ,
 144.80 ,
1506.49 ,
2342.83 ,
 151.52 ,
2163.98 ,
 768.04 ,
 783.65 ,
 779.77 ,
1757.66 ,
1609.67 ,
 859.52 ,
2315.82 ,
2090.53 ,
2301.54 ,
2348.44 ,
 265.06 ,
 621.07 ,
2121.58 , 
 114.01 ,
1618.73 ,
1091.92 ,
1086.18 ,
 503.10 ,
 953.34 ,
  79.16 ,
2137.19 , 
1940.77 ,
1746.79 ,
1633.02 ,
 281.49 ,
 428.04 ,
1427.23 ,
1012.12 ,
 685.24 ,
 294.13 ,
1204.06 ,
1631.36 ,
 848.35 ,
 122.74 , 
1706.66 ,
1901.52 ,
 565.36 ,
1964.12 ,
  57.66 ,
1412.46, 
 945.96 ,
1987.17 ,
 392.17 ,
 258.16 ,
1783.60 ,
1520.12 ,
1233.75 ,
1534.29 ,
 907.39 ,
1917.86 ,
 909.22 ,
1206.81 ,
1894.66 ,
 243.03 ,
  64.53 ,
 341.12 ,
 663.72 ,
2146.98 ,
 487.48 ,
2321.54 ,
2177.07 ,
1007.05 ,
1732.17 ,
 697.68 ,
 478.61 ,
 459.35 ,
2059.87 ,
 927.07 ,
 547.71 ,
 612.48 ,
1979.37 ,
 847.72 ,
1005.59 ,
1712.62 ,
1572.30 ,
1914.91 ,
 683.73 ,
1605.65 ,
 469.12 ,
 603.23 ,
1996.62 ,
1296.43 ,
1227.35 ,
 579.09 ,
2106.88 ,
 998.65 ,
1470.02 ,
 250.75 ,
  92.57 ,
1285.27 , 
 414.50 ,
1483.24 ,
 222.45 ,
 522.87 ,
2311.28 ,
2244.71 ,
2301.17 ,
 943.21 ,
2241.08 ,
2310.35 ,
 113.88 ,
1937.85 ,
 326.03 ,
 277.85 ,
 731.84 ,
2308.45 ,
 545.79 ,
2266.80 ,
 738.00 ,
 988.31 ,
2291.25 ,
 280.63 ,
 666.63 ,
1384.91 ,
1026.59 ,
 830.94 ,
1899.26 ,
 302.84 ,
1251.20 ,
1340.37 ,
 423.99 ,
 152.85 ,
1881.05 ,
 198.82 ,
 573.34 ,
1769.59 ,
1664.71 ,
1107.81 ,
 875.90 ,
 782.79 ,
 539.21 ,
1958.04 ,
1824.48 ,
2272.23 ,
 296.39 ,
1975.90 ,
 505.40 ,
2116.00 ,
1003.96 ,
1325.58 ,
1172.26 ,
1850.97 ,
 650.27 ,
 846.96 ,
1096.97 ,
1458.47 ,
1791.30 ,
1749.69 ,
1939.60 ,
 845.74 ,
1616.31 ,
1373.78 ,
 508.98 ,
 201.87 ,
 449.54 ,
1152.79 ,
 977.98 ,
 645.35 ,
1296.81 ,
 440.72 ,
 199.07 ,
 702.81 ,
 564.50 ,
 796.09 ,
2243.37 ,
 468.13 ,
 494.50 ,
2091.13 ,
2023.28 ,
2312.73 ,
 320.18 ,
1928.66 ,
 802.14 ,
2124.34 ,
 968.94 ,
 670.33 ,
1260.58 ,
2242.93 ,
2288.95 ,
1555.40 ,
1728.86 ,
 235.31 ,
1394.77 ,
 718.70 ,
1193.70 ,
1409.79 ,
1237.65 ,
1017.48 ,
1928.84 ,
 726.97 ,
 569.84 ,
1522.33 ,
 575.33 , 
 293.77 ,
1347.51 ,
 830.66 ,
2016.24 ,
1702.97 ,
 969.43 ,
2303.34 ,
1647.78 ,
2221.05 ,
1023.70 ,
 371.98 ,
1335.14 ,
 381.71 ,
1938.06 ,
 742.94 ,
1212.14 ,
2164.46 ,
 955.06 ,
 713.33 ,
 488.94 ,
1728.52 ,
 933.95 ,
 242.52 ,
1640.11 ,
1895.20 ,
1232.06 ,
 316.14 ,
1728.68 ,
1345.64 ,
1063.75 ,
1623.00 ,
 971.83 ,
1970.97 ,
1634.61 ,
1966.23 ,
 664.06 ,
2101.22 ,
 850.87 ,
1985.43 ,
 811.49 ,
2131.31 ,
 228.47 ,
 578.64 ,
2315.93 ,
1448.96 ,
 367.82 ,
1222.82 ,
1309.73 ,
 426.04 ,
1605.83 ,
2335.33 ,
 814.89 ,
2169.48 ,
 688.48 ,
1229.79 ,
1819.57 ,
1767.87 ,
 608.34 , 
 792.81 ,
1524.79 ,
  59.35 ,
2193.91 , 
2087.47 ,
 871.26 ,
 539.96 ,
1745.01 ,
 821.06 ,
2003.97 ,
1951.55 ,
 440.54 ,
1568.97 ,
 517.20 ,
 424.04 ,
 313.45 ,
1640.47 ,
1995.86 ,
1389.91 ,
 843.88 ,
1401.50 ,
 310.04 ,
 868.31 ,
1396.60 ,
 144.17 ,
1276.25 , 
 945.52 ,
1640.63 ,
1824.32 ,
 521.06 ,
1854.44 ,
1655.72 ,
1894.37 ,
 157.14 ,
  67.45 ,
 125.65 ,
1959.09 ,
1805.27 ,
 643.82 ,
1440.05 ,
 525.48 ,
 448.10 ,
2280.76 ,
  78.16 ,
1074.51 , 
1181.53 ,
 857.20 ,
 887.04 ,
1926.82 ,
 310.49 ,
1287.62 ,
1599.67 ,
2224.63 ,
 989.78 ,
1166.22 ,
 629.46 ,
1442.16 ,
 438.06 ,
1435.52 ,
  92.93 ,
1276.60 , 
2323.66 ,
 890.50 ,
 627.34 ,
 936.27 ,
1359.81 ,
1720.08 ,
1956.64 ,
1538.59 ,
1309.42 ,
 233.23 ,
1673.22 ,
1813.65 ,
 439.26 ,
1518.65 ,
 121.79 ,
 683.07 ,
 166.81 ,
  81.83 ,
 548.28 ,
 963.98 ,
 310.81 ,
1148.88 ,
1371.00 ,
1921.11 ,
1036.37 ,
 466.15 ,
2243.73 ,
 179.33 ,
 660.90 ,
1764.59 ,
1300.39 ,
2139.31 ,
 457.32 ,
 803.79 ,
 475.17 ,
1176.73 ,
 171.89 ,
 673.47 ,
 514.92 ,
 514.04 ,
 885.30 ,
 504.92 ,
1453.17 ,
 326.54 ,
1580.19 ,
2329.00 ,
1132.71 ,
 345.91 ,
1909.10 ,
 402.79 ,
1239.68 ,
 372.65 ,
2291.07 ,
 771.41 ,
1001.70 ,
1288.28 ,
1820.12 ,
2283.96 ,
1020.23 ,
 624.14 ,
1420.81 ,
1874.73 ,
2016.81 ,
1695.52 ,
 248.71 ,
1570.58 ,
 920.41 ,
1394.56 ,
 108.09 ,
 787.35 ,
 973.52 ,
1530.28 ,
2309.40 ,
1069.35 ,
 914.51 ,
 584.82 ,
1719.59 ,
 941.61 ,
2246.75 ,
2031.60 ,
 493.55 ,
2015.33 ,
2157.67 ,
1377.94 ,
1319.30 ,
 484.74 ,
 619.28 ,
 718.36 ,
1123.05 ,
 221.62 ,
 693.15 ,
1540.08 ,
1549.85 ,
 313.11 ,
1033.50 ,
1758.18 ,
 420.75 ,
 424.11 ,
 906.92 ,
1201.62 ,
2234.32 ,
1362.56 ,
1218.73 ,
 588.21 ,
2071.49 ,
 459.19 ,
1103.80 ,
1303.46 ,
1607.96 ,
 832.04 ,
2050.01 ,
 333.06 ,
1897.34 ,
1408.19 ,
 411.45 ,
1757.59 ,
 202.74 ,
 167.02 ,
1211.92 ,
1885.21 ,
1031.81 ,
 619.00 ,
1816.23 ,
 139.53 ,
 552.68 ,
2115.51 ,
1485.47 ,
1111.43 ,
 146.30 ,
 272.51 ,
 743.20 ,
1480.22 ,
2012.33 ,
 629.15 ,
2320.96 ,
2042.85 ,
1718.76 ,
 482.01 ,
 795.10 ,
1260.45 ,
1929.25 ,
1789.94 ,
 895.77 ,
1823.00 ,
  57.52 ,
 169.58 ,
  64.55 ,
 319.52 ,
 155.08 ,
 179.44 ,
1515.40 ,
  85.54 ,
 958.43 ,
 331.08 ,
1683.65 ,
 792.11 ,
1975.49 ,
 220.55 ,
1089.61 ,
 909.01 ,
1487.16 ,
2113.70 ,
1980.52 ,
 250.67 ,
2059.79 ,
1142.60 ,
 782.29 ,
 796.80 ,
 346.73 ,
 155.49 ,
1052.11 ,
1375.72 ,
 964.09 ,
 991.65 ,
2166.55 ,
1243.38 ,
1688.53 ,
 497.83 ,
 917.85 ,
 682.12 ,
1021.33 ,
1160.34 ,
1073.16 ,
 281.98 ,
 859.53 ,
1200.71 ,
 921.92 ,
 748.79 ,
2106.71 ,
2342.33 ,
 282.22 ,
2270.42 ,
1001.38 ,
1050.67 ,
 611.16 ,
2280.75 ,
 866.54 ,
2072.47 ,
1671.51 ,
2010.81 ,
1826.16 ,
 376.43 ,
1242.95 ,
1079.59 ,
2325.82 ,
1135.04 ,
 250.42 ,
2345.37 ,
 729.34 ,
 330.71 ,
1640.09 ,
 460.59 ,
 296.76 ,
1579.00 ,
1895.21 ,
1468.45 ,
 860.41 ,
 130.94 ,
1426.72 ,
1666.07 ,
1066.09 ,
 994.88 ,
1499.33 ,
1776.24 ,
 521.78 ,
1326.58 ,
1949.33 ,
1127.65 ,
1065.78 ,
2072.98 ,
1946.15 ,
1487.20 ,
2325.20 ,
 180.48 ,
 891.11 ,
1208.12 ,
1237.57 ,
1293.04 ,
 327.45 ,
1738.36 ,
1145.22 ,
1346.40 ,
 230.06 ,
1710.78 ,
2251.44 ,
 529.57 ,
1108.26 ,
1220.50 ,
 200.77 ,
1700.58 ,
 249.58 ,
1293.99 ,
1981.22 ,
1795.50 ,
1128.64 ,
1068.74 ,
1950.52 ,
  98.90 ,
1040.17 , 
1870.84 ,
2249.23 ,
1621.66 ,
1103.87 ,
1755.82 ,
1892.34 ,
1375.66 ,
 307.44 ,
 629.66 ,
 122.40 ,
 709.95 ,
 673.05 ,
2081.95 ,
 751.84 ,
1513.14 ,
 577.00 ,
 797.48 ,
 115.14 ,
1799.65 ,
1092.22 ,
 411.96 ,
1831.68 ,
 823.70 ,
1345.52 ,
 761.34 ,
 649.62 ,
1992.65 ,
2337.03 ,
 386.91 ,
1086.04 ,
 952.16 ,
1537.08 ,
 969.09 ,
 869.84 ,
 955.19 ,
 369.80 ,
 259.64 ,
 412.90 ,
2231.00 ,
 434.90 ,
1391.35 ,
 280.88 ,
2317.77 ,
1339.92 ,
  70.91 ,
 285.23 ,
 440.51 ,
 471.67 ,
 427.88 ,
 644.17 ,
1167.61 ,
 123.99 ,
 310.61 ,
1318.95 ,
2200.39 ,
1441.78 ,
1487.61 ,
 277.41 ,
1691.31 ,
 439.28 ,
  78.58 ,
1961.67 , 
1635.04 ,
 332.90 ,
1383.88 ,
1615.28 ,
2255.04 ,
 744.68 ,
2065.18 ,
 976.11 ,
 674.05 ,
2055.38 ,
2117.32 ,
 795.70 ,
 534.57 ,
1035.59 ,
 448.35 

 
 
//	*/};// ordenando o vetor
        Arrays.sort(entraDados);
//*/
//==========================================================================================================		
//===== Somando todos os valores ===========================================================================

        for (int i = 0; i < entraDados.length; i++) {
            somavetor = (double) (somavetor + entraDados[i]);
        }

        System.out.printf("A soma do vetor é: %.2f\n\n", somavetor);

//==========================================================================================================		
//===== Pegando o tamanho do vetor =========================================================================
        int tamanhoVETOR = entraDados.length;
        System.out.printf("Tamanho do vetor é: %d\n\n", tamanhoVETOR);

//==========================================================================================================		
//===== Fazendo a m?dia ==== n?mero ========================================================================
        System.out.printf("%.2f\n-----------\n%d\n\n", somavetor, entraDados.length);

//==========================================================================================================		
//===== Achando o menor e o maior valor ====================================================================
        menorVALOR = entraDados[0];
        maiorVALOR = entraDados[0];

        for (int i2 = 0; i2 < tamanhoVETOR; i2++) {
            if (entraDados[i2] < menorVALOR) {
                menorVALOR = entraDados[i2];
            }

            if (entraDados[i2] > maiorVALOR) {
                maiorVALOR = entraDados[i2];
            }
        }

//==========================================================================================================		
//===== Arredondando o menor n?mero ========================================================================
        double menorVALORarredondado = menorVALOR;
        System.out.printf("\n\nMenor valor original é: %f\n", menorVALORarredondado);

        menorVALOR = (int) Math.round(menorVALORarredondado);
        System.out.printf("\n\no menor valor arredondado ficou: %f\n\n", menorVALOR);

        int menorVALOR2 = (int) menorVALOR;
        System.out.printf("O menor valor arredondado ficou: %d\n\n", menorVALOR2);
        System.out.printf("O maior valor é: %.2f", maiorVALOR);

        double tamanhoCLASSEteste = (maiorVALOR - menorVALOR) / 15;
        int tamanhoCLASSE = (int) Math.round(tamanhoCLASSEteste);

        //double tamanhoCLASSE = (ultimoDADO - primeiroDADO)  /  15 ;
        System.out.printf("\n\nO tamanho de cada classe é: %d\n\n", tamanhoCLASSE); //entradados[0]

//==========================================================================================================		
//===== Colocando o tamanho das CLASSES ====================================================================		
        classe1 = menorVALOR2 + tamanhoCLASSE;
        classe2 = menorVALOR2 + tamanhoCLASSE * 2;
        classe3 = menorVALOR2 + tamanhoCLASSE * 3;
        classe4 = menorVALOR2 + tamanhoCLASSE * 4;
        classe5 = menorVALOR2 + tamanhoCLASSE * 5;
        classe6 = menorVALOR2 + tamanhoCLASSE * 6;
        classe7 = menorVALOR2 + tamanhoCLASSE * 7;
        classe8 = menorVALOR2 + tamanhoCLASSE * 8;
        classe9 = menorVALOR2 + tamanhoCLASSE * 9;
        classe10 = menorVALOR2 + tamanhoCLASSE * 10;
        classe11 = menorVALOR2 + tamanhoCLASSE * 11;
        classe12 = menorVALOR2 + tamanhoCLASSE * 12;
        classe13 = menorVALOR2 + tamanhoCLASSE * 13;
        classe14 = menorVALOR2 + tamanhoCLASSE * 14;
        classe15 = menorVALOR2 + tamanhoCLASSE * 15;

        System.out.printf("\n\nA classe 14 é: %d  %d  %f", menorVALOR2, tamanhoCLASSE, classe14);

//==========================================================================================================		
//===== Fazendo o xi =======================================================================================		
        double xi1 = (classe1 + menorVALOR2) / 2;
        double xi2 = (classe2 + classe1) / 2;
        double xi3 = (classe3 + classe2) / 2;
        double xi4 = (classe4 + classe3) / 2;
        double xi5 = (classe5 + classe4) / 2;
        double xi6 = (classe6 + classe5) / 2;
        double xi7 = (classe7 + classe6) / 2;
        double xi8 = (classe8 + classe7) / 2;
        double xi9 = (classe9 + classe8) / 2;
        double xi10 = (classe10 + classe9) / 2;
        double xi11 = (classe11 + classe10) / 2;
        double xi12 = (classe12 + classe11) / 2;
        double xi13 = (classe13 + classe12) / 2;
        double xi14 = (classe14 + classe13) / 2;
        double xi15 = (classe15 + classe14) / 2;

        System.out.println("\n\n--------------------------------------------");
        System.out.printf("Os valore de xi são:\n");

        System.out.printf("\n xi da CLASSE 1 =  %.2f "
                + "\n xi da CLASSE 2 =  %.2f "
                + "\n xi da CLASSE 3 =  %.2f "
                + "\n xi da CLASSE 4 =  %.2f "
                + "\n xi da CLASSE 5 =  %.2f "
                + "\n xi da CLASSE 6 =  %.2f "
                + "\n xi da CLASSE 7 =  %.2f "
                + "\n xi da CLASSE 8 =  %.2f "
                + "\n xi da CLASSE 9 =  %.2f "
                + "\n xi da CLASSE 10 =  %.2f "
                + "\n xi da CLASSE 11 =  %.2f "
                + "\n xi da CLASSE 12 =  %.2f "
                + "\n xi da CLASSE 13 =  %.2f "
                + "\n xi da CLASSE 14 =  %.2f "
                + "\n xi da CLASSE 15 =  %.2f ",
                xi1, xi2, xi3, xi4, xi5, xi6, xi7, xi8, xi9, xi10, xi11, xi12, xi13, xi14, xi15);
        double[] xi = new double[15];
        xi[0] = xi1;
        xi[1] = xi2;
        xi[2] = xi3;
        xi[3] = xi4;
        xi[4] = xi5;
        xi[5] = xi6;
        xi[6] = xi7;
        xi[7] = xi8;
        xi[8] = xi9;
        xi[9] = xi10;
        xi[10] = xi11;
        xi[11] = xi12;
        xi[12] = xi13;
        xi[13] = xi14;
        xi[14] = xi15;

//==========================================================================================================		
//===== Jogando os ni nas 15 CLASSES =======================================================================		
        if (entraDados.length > 1) {

            for (int i = 0; i < entraDados.length; i++) {

                if (entraDados[i] < classe1) { // 58 + 153 = 211 
                    QTDclasse1 = QTDclasse1 + 1;
                }

                if (entraDados[i] >= classe1 && entraDados[i] < classe2) { // 58 + 306 = 364
                    QTDclasse2 = QTDclasse2 + 1;
                }

                if (entraDados[i] >= classe2 && entraDados[i] < classe3) { // 58 + 459 = 517
                    QTDclasse3 = QTDclasse3 + 1;
                }

                if (entraDados[i] >= classe3 && entraDados[i] < classe4) { // 58 + 612 = 670
                    QTDclasse4 = QTDclasse4 + 1;
                }

                if (entraDados[i] >= classe4 && entraDados[i] < classe5) { // 58 + 765 = 823
                    QTDclasse5 = QTDclasse5 + 1;
                }

                if (entraDados[i] >= classe5 && entraDados[i] < classe6) { // 58 + 918 = 976
                    QTDclasse6 = QTDclasse6 + 1;
                }

                if (entraDados[i] >= classe6 && entraDados[i] < classe7) { // 58 + 1071 = 1129
                    QTDclasse7 = QTDclasse7 + 1;
                }

                if (entraDados[i] >= classe7 && entraDados[i] < classe8) { // 58 + 1224 = 1282
                    QTDclasse8 = QTDclasse8 + 1;
                }

                if (entraDados[i] >= classe8 && entraDados[i] < classe9) { // 58 + 1377 = 1435
                    QTDclasse9 = QTDclasse9 + 1;
                }

                if (entraDados[i] >= classe9 && entraDados[i] < classe10) { // 58 + 1530 = 1588
                    QTDclasse10 = QTDclasse10 + 1;
                }

                if (entraDados[i] >= classe10 && entraDados[i] < classe11) { // 58 + 1683 = 1741
                    QTDclasse11 = QTDclasse11 + 1;
                }

                if (entraDados[i] >= classe11 && entraDados[i] < classe12) { // 58 + 1836 = 1894
                    QTDclasse12 = QTDclasse12 + 1;
                }

                if (entraDados[i] >= classe12 && entraDados[i] < classe13) { // 58 + 1989 = 2047
                    QTDclasse13 = QTDclasse13 + 1;
                }

                if (entraDados[i] >= classe13 && entraDados[i] < classe14) { // 58 + 2142 = 2200
                    QTDclasse14 = QTDclasse14 + 1;
                }

                if (entraDados[i] >= classe14 && entraDados[i] < classe15) { // 58 + 2295 = 2353
                    QTDclasse15 = QTDclasse15 + 1;
                }

            }
        }

        System.out.println("\n");
        System.out.println("--------------------------------------------");
        System.out.println("Intervalo de valores de cada classe:\n");

        System.out.printf("Classe 1 --> %.0f até %.0f \n", menorVALOR, classe1);
        System.out.printf("Classe 2 --> %.0f até %.0f \n", classe1, classe2);
        System.out.printf("Classe 3 --> %.0f até %.0f \n", classe2, classe3);
        System.out.printf("Classe 4 --> %.0f até %.0f \n", classe3, classe4);
        System.out.printf("Classe 5 --> %.0f até %.0f \n", classe4, classe5);
        System.out.printf("Classe 6 --> %.0f até %.0f \n", classe5, classe6);
        System.out.printf("Classe 7 --> %.0f até %.0f \n", classe6, classe7);
        System.out.printf("Classe 8 --> %.0f até %.0f \n", classe7, classe8);
        System.out.printf("Classe 9 --> %.0f até %.0f \n", classe8, classe9);
        System.out.printf("Classe 10 --> %.0f até %.0f \n", classe9, classe10);
        System.out.printf("Classe 11 --> %.0f até %.0f \n", classe10, classe11);
        System.out.printf("Classe 12 --> %.0f até %.0f \n", classe11, classe12);
        System.out.printf("Classe 13 --> %.0f até %.0f \n", classe12, classe13);
        System.out.printf("Classe 14 --> %.0f até %.0f \n", classe13, classe14);
        System.out.printf("Classe 15 --> %.0f até %.0f \n", classe14, classe15);

        System.out.println("");
        System.out.println("--------------------------------------------");

//==========================================================================================================		
        /* Apenas como teste		
		
		if(entradados[1860] > 2200) {
		System.out.printf("\n? maior que 2200\n");	
		}
		
		if(entradados[1860] < 2200) {
			System.out.printf("? menor\n");
		}
		
		
		System.out.printf("%f\n", entradados[1860]);
	
	
		
		int classeTESTE = 0;
		for (int i = 0 ; 0 <=  tamanhoVETOR ; i++) {
			
			
			if(entradados[i] >= classe14 && entradados[i] < classe15) {
				classeTESTE = classeTESTE + 1;
			
				System.out.printf("classe TESTE = %d\n\n ", classeTESTE);
			}
				
			
		}
         */
//==========================================================================================================		
        System.out.println("Quantidade de ni em cada classe:\n");
//		   System.out.printf("Classe 1 = %d\n"
//		   					+ "Classe 2 = %d\n"
//		   					+ "Classe 3 = %d\n"
//		   					+ "Classe 4 = %d\n"
//		   					+ "Classe 5 = %d\n"
//		   					+ "Classe 6 = %d\n"
//		   					+ "Classe 7 = %d\n"
//		   					+ "Classe 8 = %d\n"
//		   					+ "Classe 9 = %d\n"
//		   					+ "Classe 10 = %d\n"
//		   					+ "Classe 11 = %d\n"
//		   					+ "Classe 12 = %d\n"
//		   					+ "Classe 13 = %d\n"
//		   					+ "Classe 14 = %d\n"
//		   					+ "Classe 15 = %d\n", 
//				   			QTDclasse1 , QTDclasse2 , QTDclasse3 , QTDclasse4 , QTDclasse5  ,
//				   			QTDclasse6 , QTDclasse7 , QTDclasse8 , QTDclasse9 , QTDclasse10 ,
//				   			QTDclasse11, QTDclasse12, QTDclasse13, QTDclasse14, QTDclasse15 );
        double somaNi = 0;
        double[] ni = new double[15];

        ni[0] = QTDclasse1;
        ni[1] = QTDclasse2;
        ni[2] = QTDclasse3;
        ni[3] = QTDclasse4;
        ni[4] = QTDclasse5;
        ni[5] = QTDclasse6;
        ni[6] = QTDclasse7;
        ni[7] = QTDclasse8;
        ni[8] = QTDclasse9;
        ni[9] = QTDclasse10;
        ni[10] = QTDclasse11;
        ni[11] = QTDclasse12;
        ni[12] = QTDclasse13;
        ni[13] = QTDclasse14;
        ni[14] = QTDclasse15;
           
        //imprimindo os resultados de ni
        for (int i = 0; i < ni.length; i++) {
            System.out.printf("Classe %d = %.0f%n ", i, ni[i]);
            somaNi += ni[i];
        }
        
        System.out.printf("Total:%.0f ", somaNi);

//==========================================================================================================			
//===== xi * ni ============================================================================================				   
        double xiniClasse1;
        double xiniClasse2;
        double xiniClasse3;
        double xiniClasse4;
        double xiniClasse5;
        double xiniClasse6;
        double xiniClasse7;
        double xiniClasse8;
        double xiniClasse9;
        double xiniClasse10;
        double xiniClasse11;
        double xiniClasse12;
        double xiniClasse13;
        double xiniClasse14;
        double xiniClasse15;

        xiniClasse1 = QTDclasse1 * xi1;
        xiniClasse2 = QTDclasse2 * xi2;
        xiniClasse3 = QTDclasse3 * xi3;
        xiniClasse4 = QTDclasse4 * xi4;
        xiniClasse5 = QTDclasse5 * xi5;
        xiniClasse6 = QTDclasse6 * xi6;
        xiniClasse7 = QTDclasse7 * xi7;
        xiniClasse8 = QTDclasse8 * xi8;
        xiniClasse9 = QTDclasse9 * xi9;
        xiniClasse10 = QTDclasse10 * xi10;
        xiniClasse11 = QTDclasse11 * xi11;
        xiniClasse12 = QTDclasse12 * xi12;
        xiniClasse13 = QTDclasse13 * xi13;
        xiniClasse14 = QTDclasse14 * xi14;
        xiniClasse15 = QTDclasse15 * xi15;

        System.out.println("\n--------------------------------------------");
        System.out.println("Multiplicação de xi * ni de cada classe:");

        System.out.printf("\n xi * ni da CLASSE 1 =  %.2f "
                + "\n xi * ni da CLASSE 2 =  %.2f "
                + "\n xi * ni da CLASSE 3 =  %.2f "
                + "\n xi * ni da CLASSE 4 =  %.2f "
                + "\n xi * ni da CLASSE 5 =  %.2f "
                + "\n xi * ni da CLASSE 6 =  %.2f "
                + "\n xi * ni da CLASSE 7 =  %.2f "
                + "\n xi * ni da CLASSE 8 =  %.2f "
                + "\n xi * ni da CLASSE 9 =  %.2f "
                + "\n xi * ni da CLASSE 10 =  %.2f "
                + "\n xi * ni da CLASSE 11 =  %.2f "
                + "\n xi * ni da CLASSE 12 =  %.2f "
                + "\n xi * ni da CLASSE 13 =  %.2f "
                + "\n xi * ni da CLASSE 14 =  %.2f "
                + "\n xi * ni da CLASSE 15 =  %.2f ",
                xiniClasse1, xiniClasse2, xiniClasse3, xiniClasse4, xiniClasse5,
                xiniClasse6, xiniClasse7, xiniClasse8, xiniClasse9, xiniClasse10,
                xiniClasse11, xiniClasse12, xiniClasse13, xiniClasse14, xiniClasse15);

//==========================================================================================================		
//===== fazendo a soma de todos os xi * ni =================================================================		
        double SOMATODOSxini = xiniClasse1 + xiniClasse2 + xiniClasse3 + xiniClasse4 + xiniClasse5
                + xiniClasse6 + xiniClasse7 + xiniClasse8 + xiniClasse9 + xiniClasse10
                + xiniClasse11 + xiniClasse12 + xiniClasse13 + xiniClasse14 + xiniClasse15;

        System.out.printf("\n\nA soma xi * ni das classes é: %.0f", SOMATODOSxini);

        System.out.println("\n--------------------------------------------");

//==========================================================================================================		
//==========================================================================================================		
        double fiClasse1 = 0;
        double fiClasse2 = 0;
        double fiClasse3 = 0;
        double fiClasse4 = 0;
        double fiClasse5 = 0;
        double fiClasse6 = 0;
        double fiClasse7 = 0;
        double fiClasse8 = 0;
        double fiClasse9 = 0;
        double fiClasse10 = 0;
        double fiClasse11 = 0;
        double fiClasse12 = 0;
        double fiClasse13 = 0;
        double fiClasse14 = 0;
        double fiClasse15 = 0;

        double qtdclasse1 = QTDclasse1; //criando variavel qtdclasse como double pq a QTDCLASSE era int
        double qtdclasse2 = QTDclasse2; // dao nao da pra fazer a conta dividindo, pois sempre o
        double qtdclasse3 = QTDclasse3; // resultado sera zero
        double qtdclasse4 = QTDclasse4;
        double qtdclasse5 = QTDclasse5;
        double qtdclasse6 = QTDclasse6;
        double qtdclasse7 = QTDclasse7;
        double qtdclasse8 = QTDclasse8;
        double qtdclasse9 = QTDclasse9;
        double qtdclasse10 = QTDclasse10;
        double qtdclasse11 = QTDclasse11;
        double qtdclasse12 = QTDclasse12;
        double qtdclasse13 = QTDclasse13;
        double qtdclasse14 = QTDclasse14;
        double qtdclasse15 = QTDclasse15;

        //Fazendo a conta do 100 * fi  ---> fi ? a quantidade que tem em cada classe, dividido
        //o total de valores de entrada, no caso ? 2000
        fiClasse1 = (qtdclasse1 / tamanhoVETOR) * 100;
        fiClasse2 = (qtdclasse2 / tamanhoVETOR) * 100;
        fiClasse3 = (qtdclasse3 / tamanhoVETOR) * 100;
        fiClasse4 = (qtdclasse4 / tamanhoVETOR) * 100;
        fiClasse5 = (qtdclasse5 / tamanhoVETOR) * 100;
        fiClasse6 = (qtdclasse6 / tamanhoVETOR) * 100;
        fiClasse7 = (qtdclasse7 / tamanhoVETOR) * 100;
        fiClasse8 = (qtdclasse8 / tamanhoVETOR) * 100;
        fiClasse9 = (qtdclasse9 / tamanhoVETOR) * 100;
        fiClasse10 = (qtdclasse10 / tamanhoVETOR) * 100;
        fiClasse11 = (qtdclasse11 / tamanhoVETOR) * 100;
        fiClasse12 = (qtdclasse12 / tamanhoVETOR) * 100;
        fiClasse13 = (qtdclasse13 / tamanhoVETOR) * 100;
        fiClasse14 = (qtdclasse14 / tamanhoVETOR) * 100;
        fiClasse15 = (qtdclasse15 / tamanhoVETOR) * 100;

        double somaTodosfi = fiClasse1 + fiClasse2 + fiClasse3 + fiClasse4 + fiClasse5
                + fiClasse6 + fiClasse7 + fiClasse8 + fiClasse9 + fiClasse10
                + fiClasse11 + fiClasse12 + fiClasse13 + fiClasse14 + fiClasse15;

        //Mostrando na tela o resultado de 100 * fi
        System.out.printf("\n100 * fi da Classe 1 é: %.2f%%", fiClasse1);
        System.out.printf("\n100 * fi da Classe 2 é: %.2f%%", fiClasse2);
        System.out.printf("\n100 * fi da Classe 3 é: %.2f%%", fiClasse3);
        System.out.printf("\n100 * fi da Classe 4 é: %.2f%%", fiClasse4);
        System.out.printf("\n100 * fi da Classe 5 é: %.2f%%", fiClasse5);
        System.out.printf("\n100 * fi da Classe 6 é: %.2f%%", fiClasse6);
        System.out.printf("\n100 * fi da Classe 7 é: %.2f%%", fiClasse7);
        System.out.printf("\n100 * fi da Classe 8 é: %.2f%%", fiClasse8);
        System.out.printf("\n100 * fi da Classe 9 é: %.2f%%", fiClasse9);
        System.out.printf("\n100 * fi da Classe 10 é: %.2f%%", fiClasse10);
        System.out.printf("\n100 * fi da Classe 11 é: %.2f%%", fiClasse11);
        System.out.printf("\n100 * fi da Classe 12 é: %.2f%%", fiClasse12);
        System.out.printf("\n100 * fi da Classe 13 é: %.2f%%", fiClasse13);
        System.out.printf("\n100 * fi da Classe 14 é: %.2f%%", fiClasse14);
        System.out.printf("\n100 * fi da Classe 15 é: %.2f%%", fiClasse15);

        System.out.printf("\nSoma porcentagem é: %.0f%%\n\n", somaTodosfi);

//==========================================================================================================		
//==========================================================================================================		
        //Calculo Média
        double media2 = somavetor / entraDados.length;

        // Calculos finais: pegar a media menos o Xi elevado a 2 vezes Ni
        System.out.println("Valores Finais:");
        double somaFinal2 = 0;

        double[] vetFinal2 = new double[ni.length];
        for (int i = 0; i < xi.length; i++) {
            vetFinal2[i] = (media2 - xi[i]) * (media2 - xi[i]) * ni[i];
            System.out.printf("%.2f%n", vetFinal2[i]);
            somaFinal2 += vetFinal2[i];

        }
        //imprime o total dos calculos finais
        System.out.printf("Total: %.2f ", somaFinal2);

        System.out.println("\n");
        //imprime a Média
        System.out.printf("Média: %.2f\n", media2);

        String ModaCompletaa2 = "";

        //double vetModa[] = { 54 , 61 , 75 , 81 , 86 }; 
//                
//                for( int i = 0 ; i < entraDados.length ; i++) {
//                    System.out.printf("%.2f%n" ,entraDados[i]);
//                
//                }
//                System.out.println("\n");
//                 System.out.println(entraDados[999]);
////                  System.out.println(entraDados[1000]);
//                
        

         // Calculos da moda
        for (int i = 0; i < entraDados.length; i++) {
            ModaCompletaa2 = ModaCompletaa2 + entraDados[i] + " ||\n ";
        }

        System.out.println("Moda :");
//                 for( int i = 0 ; i < entradados.length ; i++) {
//                     for( int j = 0 ; j < entradados.length ; j++) {
//                       if(entradados[i] == entradados[j]){
//                           
//                       

//                       }
//                     }
//                 }
//                 
        double[] vete2 = new double[entraDados.length];
        int cont3 = 0;

        double moda2 = entraDados[0];
        for (int i = 0; i < entraDados.length - 1; i++) {
            if (entraDados[i] == entraDados[i + 1]) {
                if (moda2 != entraDados[i]) {
                    moda2 = entraDados[i];
                    vete2[i] = moda2; //posição i do vetor recebe moda corrente
                    cont3 = cont3 + 1; //achando a quantidade de números q se repetem e jogando essa quantidade na variável cont
                    System.out.println(vete2[i]); //mostrando todas as modas de cada posição do vetor

                }

            }
        }

//      System.out.printf("\n\n");
        System.out.printf("O contador é: %d", cont3); //imprimindo na tela o valor do contador
        System.out.printf("\n");

        String modaCompleta2 = " "; //criando variável modaCompleta para pegar todas as modas
        // para ficar na mesma linha e jogar na INTERFACE

        for (int i = 0; i < entraDados.length - 1; i++) {//mesmo código da parte de cima
            if (entraDados[i] == entraDados[i + 1]) { //mesmo código da parte de cima
                if (moda2 != entraDados[i]) { //mesmo código da parte de cima
                    moda2 = entraDados[i]; //mesmo código da parte de cima
                    vete2[i] = moda2; //mesmo código da parte de cima

                    for (int i3 = 0; i3 < 1; i3++) { // 
                        modaCompleta2 = modaCompleta2 + vete2[i] + " || "; // jogando todas as modas dentro de uma String só
                        System.out.printf("\n%s", modaCompleta2);
                    }

                }

            }
        }

//       moda2 = moda;
//     ===============================================================================
        System.out.printf("\n");
//        System.out.println(modaCompleta);
//        moda2 = (modaCompleta);
        System.out.printf("\n");

        // calculos para achar a mediana
        int valoresNumeros2 = entraDados.length % 2;
        double medianaa1 = 0;
        double medianaa2 = 0;

        if (valoresNumeros2 == 1) {
            medianaa1 = entraDados[((entraDados.length + 1) / 2) - 1];
            System.out.println("Mediana: " + medianaa1);
        } else {
            int num = entraDados.length / 2;
            medianaa1 = (entraDados[num - 1] + entraDados[num]) / 2;
            System.out.println("Mediana: " + medianaa1);
        }
        //calculo variância
        double variancia2 = 0;
        double desvioPadrao2 = 0;
        variancia2 = somaFinal2 / somaNi;
        System.out.printf("Variância: %.2f ", variancia2);

        // calculo para o desvio padrão
        desvioPadrao2 = Math.sqrt(variancia2);
        System.out.printf("\nDesvio Padrão: %.2f%n ", desvioPadrao2);


        
        
        
//        
//                 System.out.println("\n");
//                 System.out.println(entraDados[999]);
//                 System.out.println(entraDados[1000]);
//        
//        
//        for(int i = 0; i < entraDados.length;i++){
//        System.out.println( i + " = " + entraDados[i]);
//        }
        
//                 for(int i = 0; i < xi.length;i++){ 
//	         System.out.println(xi[i]);   
//	}
//                System.out.println("\n");
//                
//                 for(int i = 0; i < ni.length;i++){ 
//	         System.out.println(ni[i]);   
//	}
   		
//==========================================================================================================		
//		     
    }
    
}
